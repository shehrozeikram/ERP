const JournalEntry = require('../models/finance/JournalEntry');
const GeneralLedger = require('../models/finance/GeneralLedger');
const Account = require('../models/finance/Account');
const AccountsReceivable = require('../models/finance/AccountsReceivable');
const AccountsPayable = require('../models/finance/AccountsPayable');

class FinanceIntegrationService {
  /**
   * Auto-post payroll expenses to finance module
   */
  static async postPayrollExpense(payrollData, createdBy) {
    try {
      const { employeeId, grossSalary, deductions, netPay, department, month, year } = payrollData;

      // Find relevant accounts
      const salaryAccount = await Account.findOne({ 
        accountNumber: '5400', 
        department: 'hr',
        module: 'payroll' 
      });
      const payrollLiabilityAccount = await Account.findOne({ 
        accountNumber: '2200', 
        department: 'hr',
        module: 'payroll' 
      });
      const cashAccount = await Account.findOne({ 
        accountNumber: '1000' 
      });

      if (!salaryAccount || !payrollLiabilityAccount || !cashAccount) {
        throw new Error('Required payroll accounts not found');
      }

      const journalEntry = new JournalEntry({
        date: new Date(year, month - 1, 1),
        reference: `PAY-${employeeId}-${month}/${year}`,
        description: `Payroll for employee ${employeeId} - ${month}/${year}`,
        department: 'hr',
        module: 'payroll',
        referenceId: payrollData._id,
        referenceType: 'payroll',
        lines: [
          {
            account: salaryAccount._id,
            description: `Salary expense for employee ${employeeId}`,
            debit: grossSalary,
            department: 'hr'
          },
          {
            account: payrollLiabilityAccount._id,
            description: `Payroll deductions for employee ${employeeId}`,
            credit: deductions,
            department: 'hr'
          },
          {
            account: cashAccount._id,
            description: `Net pay disbursement for employee ${employeeId}`,
            credit: netPay,
            department: 'hr'
          }
        ],
        createdBy,
        isAutoGenerated: true
      });

      await journalEntry.post(createdBy);
      return journalEntry;
    } catch (error) {
      console.error('Error posting payroll expense:', error);
      throw error;
    }
  }

  /**
   * Auto-post procurement expenses to finance module
   */
  static async postProcurementExpense(procurementData, createdBy) {
    try {
      const { vendorId, totalAmount, items, department, purchaseOrderNumber } = procurementData;

      // Find relevant accounts
      const expenseAccount = await Account.findOne({ 
        accountNumber: '5610', 
        department: 'procurement',
        module: 'procurement' 
      });
      const accountsPayableAccount = await Account.findOne({ 
        accountNumber: '2000',
        department: 'procurement',
        module: 'procurement'
      });

      if (!expenseAccount || !accountsPayableAccount) {
        throw new Error('Required procurement accounts not found');
      }

      const journalEntry = new JournalEntry({
        date: new Date(),
        reference: `PO-${purchaseOrderNumber}`,
        description: `Purchase order ${purchaseOrderNumber} from vendor ${vendorId}`,
        department: 'procurement',
        module: 'procurement',
        referenceId: procurementData._id,
        referenceType: 'bill',
        lines: [
          {
            account: expenseAccount._id,
            description: `Procurement expenses for PO ${purchaseOrderNumber}`,
            debit: totalAmount,
            department: 'procurement'
          },
          {
            account: accountsPayableAccount._id,
            description: `Accounts payable for vendor ${vendorId}`,
            credit: totalAmount,
            department: 'procurement'
          }
        ],
        createdBy,
        isAutoGenerated: true
      });

      await journalEntry.post(createdBy);
      return journalEntry;
    } catch (error) {
      console.error('Error posting procurement expense:', error);
      throw error;
    }
  }

  /**
   * Auto-post sales revenue to finance module
   */
  static async postSalesRevenue(salesData, createdBy) {
    try {
      const { customerId, totalAmount, invoiceNumber, items, department } = salesData;

      // Find relevant accounts
      const revenueAccount = await Account.findOne({ 
        accountNumber: '4000', 
        department: 'sales',
        module: 'sales' 
      });
      const accountsReceivableAccount = await Account.findOne({ 
        accountNumber: '1200',
        department: 'sales',
        module: 'sales'
      });

      if (!revenueAccount || !accountsReceivableAccount) {
        throw new Error('Required sales accounts not found');
      }

      const journalEntry = new JournalEntry({
        date: new Date(),
        reference: `INV-${invoiceNumber}`,
        description: `Sales invoice ${invoiceNumber} to customer ${customerId}`,
        department: 'sales',
        module: 'sales',
        referenceId: salesData._id,
        referenceType: 'invoice',
        lines: [
          {
            account: accountsReceivableAccount._id,
            description: `Accounts receivable for invoice ${invoiceNumber}`,
            debit: totalAmount,
            department: 'sales'
          },
          {
            account: revenueAccount._id,
            description: `Sales revenue from invoice ${invoiceNumber}`,
            credit: totalAmount,
            department: 'sales'
          }
        ],
        createdBy,
        isAutoGenerated: true
      });

      await journalEntry.post(createdBy);
      return journalEntry;
    } catch (error) {
      console.error('Error posting sales revenue:', error);
      throw error;
    }
  }

  /**
   * Auto-post admin expenses to finance module
   */
  static async postAdminExpense(adminData, createdBy) {
    try {
      const { expenseType, amount, description, department, reference } = adminData;

      // Find relevant expense account based on type
      let expenseAccount;
      switch (expenseType) {
        case 'office_rent':
          expenseAccount = await Account.findOne({ accountNumber: '5500', department: 'admin' });
          break;
        case 'utilities':
          expenseAccount = await Account.findOne({ accountNumber: '5510', department: 'admin' });
          break;
        case 'office_supplies':
          expenseAccount = await Account.findOne({ accountNumber: '5520', department: 'admin' });
          break;
        case 'insurance':
          expenseAccount = await Account.findOne({ accountNumber: '5530', department: 'admin' });
          break;
        case 'legal_fees':
          expenseAccount = await Account.findOne({ accountNumber: '5540', department: 'admin' });
          break;
        default:
          expenseAccount = await Account.findOne({ accountNumber: '5920', department: 'admin' }); // Other expenses
      }

      const cashAccount = await Account.findOne({ accountNumber: '1000' });

      if (!expenseAccount || !cashAccount) {
        throw new Error('Required admin accounts not found');
      }

      const journalEntry = new JournalEntry({
        date: new Date(),
        reference: `ADM-${reference || Date.now()}`,
        description: description || `Admin expense: ${expenseType}`,
        department: 'admin',
        module: 'admin',
        referenceId: adminData._id,
        referenceType: 'manual',
        lines: [
          {
            account: expenseAccount._id,
            description: description || `Admin expense: ${expenseType}`,
            debit: amount,
            department: 'admin'
          },
          {
            account: cashAccount._id,
            description: `Payment for admin expense: ${expenseType}`,
            credit: amount,
            department: 'admin'
          }
        ],
        createdBy,
        isAutoGenerated: true
      });

      await journalEntry.post(createdBy);
      return journalEntry;
    } catch (error) {
      console.error('Error posting admin expense:', error);
      throw error;
    }
  }

  /**
   * Auto-post audit adjustments to finance module
   */
  static async postAuditAdjustment(auditData, createdBy) {
    try {
      const { adjustmentType, amount, description, affectedAccount, department } = auditData;

      const targetAccount = await Account.findById(affectedAccount);
      const auditExpenseAccount = await Account.findOne({ 
        accountNumber: '5820', 
        department: 'audit',
        module: 'audit' 
      });

      if (!targetAccount || !auditExpenseAccount) {
        throw new Error('Required audit accounts not found');
      }

      const journalEntry = new JournalEntry({
        date: new Date(),
        reference: `AUD-${Date.now()}`,
        description: description || `Audit adjustment: ${adjustmentType}`,
        department: 'audit',
        module: 'audit',
        referenceId: auditData._id,
        referenceType: 'adjustment',
        lines: [
          {
            account: auditExpenseAccount._id,
            description: description || `Audit adjustment: ${adjustmentType}`,
            debit: amount,
            department: 'audit'
          },
          {
            account: targetAccount._id,
            description: description || `Audit adjustment: ${adjustmentType}`,
            credit: amount,
            department: 'audit'
          }
        ],
        createdBy,
        isAutoGenerated: true
      });

      await journalEntry.post(createdBy);
      return journalEntry;
    } catch (error) {
      console.error('Error posting audit adjustment:', error);
      throw error;
    }
  }

  /**
   * Post payment received for accounts receivable
   */
  static async postPaymentReceived(paymentData, createdBy) {
    try {
      const { invoiceId, amount, paymentMethod, reference } = paymentData;

      const invoice = await AccountsReceivable.findById(invoiceId);
      if (!invoice) {
        throw new Error('Invoice not found');
      }

      const cashAccount = await Account.findOne({ accountNumber: '1000' });
      const arAccount = await Account.findOne({ accountNumber: '1200' });

      if (!cashAccount || !arAccount) {
        throw new Error('Required accounts not found');
      }

      const journalEntry = new JournalEntry({
        date: new Date(),
        reference: `PAY-${reference || Date.now()}`,
        description: `Payment received for invoice ${invoice.invoiceNumber}`,
        department: invoice.department,
        module: invoice.module,
        referenceId: invoiceId,
        referenceType: 'payment',
        lines: [
          {
            account: cashAccount._id,
            description: `Payment received from ${invoice.customer.name}`,
            debit: amount,
            department: invoice.department
          },
          {
            account: arAccount._id,
            description: `Payment applied to invoice ${invoice.invoiceNumber}`,
            credit: amount,
            department: invoice.department
          }
        ],
        createdBy,
        isAutoGenerated: true
      });

      await journalEntry.post(createdBy);
      return journalEntry;
    } catch (error) {
      console.error('Error posting payment received:', error);
      throw error;
    }
  }

  /**
   * Post payment made for accounts payable
   */
  static async postPaymentMade(paymentData, createdBy) {
    try {
      const { billId, amount, paymentMethod, reference } = paymentData;

      const bill = await AccountsPayable.findById(billId);
      if (!bill) {
        throw new Error('Bill not found');
      }

      const cashAccount = await Account.findOne({ accountNumber: '1000' });
      const apAccount = await Account.findOne({ accountNumber: '2000' });

      if (!cashAccount || !apAccount) {
        throw new Error('Required accounts not found');
      }

      const journalEntry = new JournalEntry({
        date: new Date(),
        reference: `PAY-${reference || Date.now()}`,
        description: `Payment made for bill ${bill.billNumber}`,
        department: bill.department,
        module: bill.module,
        referenceId: billId,
        referenceType: 'payment',
        lines: [
          {
            account: apAccount._id,
            description: `Payment to ${bill.vendor.name}`,
            debit: amount,
            department: bill.department
          },
          {
            account: cashAccount._id,
            description: `Payment for bill ${bill.billNumber}`,
            credit: amount,
            department: bill.department
          }
        ],
        createdBy,
        isAutoGenerated: true
      });

      await journalEntry.post(createdBy);
      return journalEntry;
    } catch (error) {
      console.error('Error posting payment made:', error);
      throw error;
    }
  }

  /**
   * Generate department-wise financial summary
   */
  static async getDepartmentFinancialSummary(startDate, endDate) {
    try {
      const pipeline = [
        {
          $match: {
            date: { $gte: startDate, $lte: endDate },
            status: 'posted'
          }
        },
        {
          $unwind: '$lines'
        },
        {
          $lookup: {
            from: 'accounts',
            localField: 'lines.account',
            foreignField: '_id',
            as: 'account'
          }
        },
        {
          $unwind: '$account'
        },
        {
          $group: {
            _id: {
              department: '$department',
              accountType: '$account.type'
            },
            totalDebits: { $sum: '$lines.debit' },
            totalCredits: { $sum: '$lines.credit' },
            transactionCount: { $sum: 1 }
          }
        },
        {
          $group: {
            _id: '$_id.department',
            accountTypes: {
              $push: {
                type: '$_id.accountType',
                debits: '$totalDebits',
                credits: '$totalCredits',
                transactions: '$transactionCount'
              }
            },
            totalTransactions: { $sum: '$transactionCount' },
            totalDebits: { $sum: '$totalDebits' },
            totalCredits: { $sum: '$totalCredits' }
          }
        }
      ];

      const summary = await JournalEntry.aggregate(pipeline);
      return summary;
    } catch (error) {
      console.error('Error generating department financial summary:', error);
      throw error;
    }
  }

  /**
   * Get module-wise financial analytics
   */
  static async getModuleFinancialAnalytics(startDate, endDate) {
    try {
      const pipeline = [
        {
          $match: {
            date: { $gte: startDate, $lte: endDate },
            status: 'posted'
          }
        },
        {
          $unwind: '$lines'
        },
        {
          $lookup: {
            from: 'accounts',
            localField: 'lines.account',
            foreignField: '_id',
            as: 'account'
          }
        },
        {
          $unwind: '$account'
        },
        {
          $group: {
            _id: {
              module: '$module',
              department: '$department',
              accountType: '$account.type'
            },
            totalAmount: { $sum: { $subtract: ['$lines.debit', '$lines.credit'] } },
            transactionCount: { $sum: 1 }
          }
        },
        {
          $group: {
            _id: '$_id.module',
            departments: {
              $push: {
                department: '$_id.department',
                accountType: '$_id.accountType',
                amount: '$totalAmount',
                transactions: '$transactionCount'
              }
            },
            totalAmount: { $sum: '$totalAmount' },
            totalTransactions: { $sum: '$transactionCount' }
          }
        }
      ];

      const analytics = await JournalEntry.aggregate(pipeline);
      return analytics;
    } catch (error) {
      console.error('Error generating module financial analytics:', error);
      throw error;
    }
  }
}

module.exports = FinanceIntegrationService;
